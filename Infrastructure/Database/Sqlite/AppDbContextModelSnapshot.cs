// <auto-generated />
using System;
using Hospital.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital.Infrastructure.Database.Sqlite
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExameLaudo", b =>
                {
                    b.Property<Guid>("ExamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LaudosId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExamesId", "LaudosId");

                    b.HasIndex("LaudosId");

                    b.ToTable("ExameLaudo");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Agendamentos.ConsultaAgendamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ConvenioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Criado")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Custo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CustoAtraso")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CustoFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConvenioId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("Status");

                    b.ToTable("AgendamentosConsultas");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Agendamentos.ExameAgendamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConsultaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConvenioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Criado")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Custo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CustoAtraso")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CustoFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("ConvenioId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("Status");

                    b.ToTable("AgendamentosExames");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Agendamentos.RetornoAgendamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConsultaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConvenioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Criado")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Custo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CustoAtraso")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CustoFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("ConvenioId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("Status");

                    b.ToTable("AgendamentosRetornos");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Atendimentos.Consulta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgendamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ConvenioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Criado")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Custo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CustoFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Fim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgendamentoId")
                        .IsUnique()
                        .HasFilter("[AgendamentoId] IS NOT NULL");

                    b.HasIndex("ConvenioId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("Status");

                    b.ToTable("Consultas");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Atendimentos.Exame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgendamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConsultaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConvenioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Criado")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Custo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CustoFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Fim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Resultado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgendamentoId")
                        .IsUnique()
                        .HasFilter("[AgendamentoId] IS NOT NULL");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("ConvenioId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("Status");

                    b.ToTable("Exames");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Atendimentos.Retorno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgendamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConsultaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConvenioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Criado")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Custo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CustoFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Fim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgendamentoId")
                        .IsUnique()
                        .HasFilter("[AgendamentoId] IS NOT NULL");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("ConvenioId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("Status");

                    b.ToTable("Retornos");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Cadastros.Cadastro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Criado")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Genero")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NumeroCasa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Telefone")
                        .HasColumnType("bigint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Ativo");

                    b.HasIndex("CPF")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Genero");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Convenio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("CEP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Criado")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Desconto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descrição")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Site")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Ativo");

                    b.HasIndex("CNPJ");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Convenios");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Laudo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConsultaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Criado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DocPath")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("DocPath")
                        .IsUnique()
                        .HasFilter("[DocPath] IS NOT NULL");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Laudos");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Medicamentos.Medicamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int>("CodigoDeBarras")
                        .HasColumnType("int");

                    b.Property<string>("Composicao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Criado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PrincipioAtivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int>("QuantidadeMinima")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CodigoDeBarras")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("Medicamentos");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Medicamentos.MedicamentoLote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Criado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DataFabricacao")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataVencimento")
                        .HasColumnType("date");

                    b.Property<string>("Fabricante")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MedicamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int>("QuantidadeDisponivel")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("MedicamentoId");

                    b.HasIndex("Status");

                    b.ToTable("MedicamentoLotes");
                });

            modelBuilder.Entity("LaudoMedicamento", b =>
                {
                    b.Property<Guid>("LaudosId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicamentosId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LaudosId", "MedicamentosId");

                    b.HasIndex("MedicamentosId");

                    b.ToTable("LaudoMedicamento");
                });

            modelBuilder.Entity("MedicamentoPaciente", b =>
                {
                    b.Property<Guid>("MedicamentosId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PacientesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MedicamentosId", "PacientesId");

                    b.HasIndex("PacientesId");

                    b.ToTable("MedicamentoPaciente");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Cadastros.Admin", b =>
                {
                    b.HasBaseType("Hospital.Domain.Entities.Cadastros.Cadastro");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Cadastros.Medico", b =>
                {
                    b.HasBaseType("Hospital.Domain.Entities.Cadastros.Cadastro");

                    b.Property<int>("CRM")
                        .HasColumnType("int");

                    b.Property<string>("CRMUF")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<Guid?>("DocCRMPath")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CRM")
                        .IsUnique()
                        .HasFilter("[CRM] IS NOT NULL");

                    b.HasIndex("DocCRMPath")
                        .IsUnique()
                        .HasFilter("[DocCRMPath] IS NOT NULL");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Cadastros.Paciente", b =>
                {
                    b.HasBaseType("Hospital.Domain.Entities.Cadastros.Cadastro");

                    b.Property<Guid?>("ConvenioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocConvenioPath")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocIDPath")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ConvenioId");

                    b.HasIndex("DocConvenioPath")
                        .IsUnique()
                        .HasFilter("[DocConvenioPath] IS NOT NULL");

                    b.HasIndex("DocIDPath")
                        .IsUnique()
                        .HasFilter("[DocIDPath] IS NOT NULL");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("ExameLaudo", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Atendimentos.Exame", null)
                        .WithMany()
                        .HasForeignKey("ExamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Entities.Laudo", null)
                        .WithMany()
                        .HasForeignKey("LaudosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Agendamentos.ConsultaAgendamento", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Convenio", "Convenio")
                        .WithMany("AgendamentosConsultas")
                        .HasForeignKey("ConvenioId");

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Medico", "Medico")
                        .WithMany("AgendamentosConsultas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Paciente", "Paciente")
                        .WithMany("AgendamentosConsultas")
                        .HasForeignKey("PacienteId");

                    b.Navigation("Convenio");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Agendamentos.ExameAgendamento", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Atendimentos.Consulta", "Consulta")
                        .WithMany("AgendamentosExames")
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Entities.Convenio", "Convenio")
                        .WithMany("AgendamentosExames")
                        .HasForeignKey("ConvenioId");

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Medico", "Medico")
                        .WithMany("AgendamentosExames")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Paciente", "Paciente")
                        .WithMany("AgendamentosExames")
                        .HasForeignKey("PacienteId");

                    b.Navigation("Consulta");

                    b.Navigation("Convenio");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Agendamentos.RetornoAgendamento", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Atendimentos.Consulta", "Consulta")
                        .WithMany()
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Entities.Convenio", "Convenio")
                        .WithMany("AgendamentosRetornos")
                        .HasForeignKey("ConvenioId");

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Medico", "Medico")
                        .WithMany("AgendamentosRetornos")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Paciente", "Paciente")
                        .WithMany("AgendamentosRetornos")
                        .HasForeignKey("PacienteId");

                    b.Navigation("Consulta");

                    b.Navigation("Convenio");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Atendimentos.Consulta", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Agendamentos.ConsultaAgendamento", "Agendamento")
                        .WithOne("Consulta")
                        .HasForeignKey("Hospital.Domain.Entities.Atendimentos.Consulta", "AgendamentoId");

                    b.HasOne("Hospital.Domain.Entities.Convenio", "Convenio")
                        .WithMany("Consultas")
                        .HasForeignKey("ConvenioId");

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Medico", "Medico")
                        .WithMany("Consultas")
                        .HasForeignKey("MedicoId");

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Paciente", "Paciente")
                        .WithMany("Consultas")
                        .HasForeignKey("PacienteId");

                    b.Navigation("Agendamento");

                    b.Navigation("Convenio");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Atendimentos.Exame", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Agendamentos.ExameAgendamento", "Agendamento")
                        .WithOne("Exame")
                        .HasForeignKey("Hospital.Domain.Entities.Atendimentos.Exame", "AgendamentoId");

                    b.HasOne("Hospital.Domain.Entities.Atendimentos.Consulta", "Consulta")
                        .WithMany("Exames")
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Entities.Convenio", "Convenio")
                        .WithMany("Exames")
                        .HasForeignKey("ConvenioId");

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Medico", "Medico")
                        .WithMany("Exames")
                        .HasForeignKey("MedicoId");

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Paciente", "Paciente")
                        .WithMany("Exames")
                        .HasForeignKey("PacienteId");

                    b.Navigation("Agendamento");

                    b.Navigation("Consulta");

                    b.Navigation("Convenio");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Atendimentos.Retorno", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Agendamentos.RetornoAgendamento", "Agendamento")
                        .WithOne("Retorno")
                        .HasForeignKey("Hospital.Domain.Entities.Atendimentos.Retorno", "AgendamentoId");

                    b.HasOne("Hospital.Domain.Entities.Atendimentos.Consulta", "Consulta")
                        .WithMany("Retornos")
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Entities.Convenio", "Convenio")
                        .WithMany("Retornos")
                        .HasForeignKey("ConvenioId");

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Medico", "Medico")
                        .WithMany("Retornos")
                        .HasForeignKey("MedicoId");

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Paciente", "Paciente")
                        .WithMany("Retornos")
                        .HasForeignKey("PacienteId");

                    b.Navigation("Agendamento");

                    b.Navigation("Consulta");

                    b.Navigation("Convenio");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Laudo", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Atendimentos.Consulta", "Consulta")
                        .WithMany("Laudos")
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Medico", "Medico")
                        .WithMany("Laudos")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Paciente", "Paciente")
                        .WithMany("Laudos")
                        .HasForeignKey("PacienteId");

                    b.Navigation("Consulta");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Medicamentos.MedicamentoLote", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Medicamentos.Medicamento", "Medicamento")
                        .WithMany("MedicamentoLotes")
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("LaudoMedicamento", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Laudo", null)
                        .WithMany()
                        .HasForeignKey("LaudosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Entities.Medicamentos.Medicamento", null)
                        .WithMany()
                        .HasForeignKey("MedicamentosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicamentoPaciente", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Medicamentos.Medicamento", null)
                        .WithMany()
                        .HasForeignKey("MedicamentosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Paciente", null)
                        .WithMany()
                        .HasForeignKey("PacientesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Cadastros.Cadastro", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Cadastros.Cadastro", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Cadastro", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Cadastros.Cadastro", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Cadastros.Admin", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Cadastros.Cadastro", null)
                        .WithOne()
                        .HasForeignKey("Hospital.Domain.Entities.Cadastros.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Cadastros.Medico", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Cadastros.Cadastro", null)
                        .WithOne()
                        .HasForeignKey("Hospital.Domain.Entities.Cadastros.Medico", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Cadastros.Paciente", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Convenio", "Convenio")
                        .WithMany("Pacientes")
                        .HasForeignKey("ConvenioId");

                    b.HasOne("Hospital.Domain.Entities.Cadastros.Cadastro", null)
                        .WithOne()
                        .HasForeignKey("Hospital.Domain.Entities.Cadastros.Paciente", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convenio");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Agendamentos.ConsultaAgendamento", b =>
                {
                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Agendamentos.ExameAgendamento", b =>
                {
                    b.Navigation("Exame");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Agendamentos.RetornoAgendamento", b =>
                {
                    b.Navigation("Retorno");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Atendimentos.Consulta", b =>
                {
                    b.Navigation("AgendamentosExames");

                    b.Navigation("Exames");

                    b.Navigation("Laudos");

                    b.Navigation("Retornos");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Convenio", b =>
                {
                    b.Navigation("AgendamentosConsultas");

                    b.Navigation("AgendamentosExames");

                    b.Navigation("AgendamentosRetornos");

                    b.Navigation("Consultas");

                    b.Navigation("Exames");

                    b.Navigation("Pacientes");

                    b.Navigation("Retornos");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Medicamentos.Medicamento", b =>
                {
                    b.Navigation("MedicamentoLotes");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Cadastros.Medico", b =>
                {
                    b.Navigation("AgendamentosConsultas");

                    b.Navigation("AgendamentosExames");

                    b.Navigation("AgendamentosRetornos");

                    b.Navigation("Consultas");

                    b.Navigation("Exames");

                    b.Navigation("Laudos");

                    b.Navigation("Retornos");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Cadastros.Paciente", b =>
                {
                    b.Navigation("AgendamentosConsultas");

                    b.Navigation("AgendamentosExames");

                    b.Navigation("AgendamentosRetornos");

                    b.Navigation("Consultas");

                    b.Navigation("Exames");

                    b.Navigation("Laudos");

                    b.Navigation("Retornos");
                });
#pragma warning restore 612, 618
        }
    }
}
