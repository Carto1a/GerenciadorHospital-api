// <auto-generated />
using System;
using Hospital.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240411145410_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("Hospital.Models.Agendamentos.ConsultaAgendamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ConvenioId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Criação")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Custo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CustoFinal")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TipoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConvenioId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("TipoId")
                        .IsUnique();

                    b.ToTable("AgendamentosConsultas");
                });

            modelBuilder.Entity("Hospital.Models.Agendamentos.ExameAgendamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ConvenioId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Criação")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Custo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CustoFinal")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TipoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConvenioId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("TipoId")
                        .IsUnique();

                    b.ToTable("AgendamentosExames");
                });

            modelBuilder.Entity("Hospital.Models.Agendamentos.RetornoAgendamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ConvenioId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Criação")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Custo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CustoFinal")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TipoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConvenioId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("TipoId")
                        .IsUnique();

                    b.ToTable("AgendamentosRetornos");
                });

            modelBuilder.Entity("Hospital.Models.Atendimento.Consulta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Convenio")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Criado")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Custo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fim")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacoes")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Consultas");
                });

            modelBuilder.Entity("Hospital.Models.Atendimento.Exame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Convenio")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Criado")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Custo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fim")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Exames");
                });

            modelBuilder.Entity("Hospital.Models.Atendimento.Retorno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ConsultaId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Convenio")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Criado")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Custo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fim")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Retornos");
                });

            modelBuilder.Entity("Hospital.Models.Cadastro.Cadastro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cep")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<int>("Cpf")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Genero")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroCasa")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Hospital.Models.Cadastro.Convenio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CEP")
                        .HasColumnType("TEXT");

                    b.Property<string>("CNPJ")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Criado")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Desconto")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descrição")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Numero")
                        .HasColumnType("TEXT");

                    b.Property<string>("Site")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Convenios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hospital.Models.Cadastro.Admin", b =>
                {
                    b.HasBaseType("Hospital.Models.Cadastro.Cadastro");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Hospital.Models.Cadastro.Medico", b =>
                {
                    b.HasBaseType("Hospital.Models.Cadastro.Cadastro");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("Hospital.Models.Cadastro.Paciente", b =>
                {
                    b.HasBaseType("Hospital.Models.Cadastro.Cadastro");

                    b.Property<Guid?>("ConvenioId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImgCarteiraConvenio")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImgDocumento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("ConvenioId");

                    b.ToTable("Pacientes", (string)null);
                });

            modelBuilder.Entity("Hospital.Models.Agendamentos.ConsultaAgendamento", b =>
                {
                    b.HasOne("Hospital.Models.Cadastro.Convenio", "Convenio")
                        .WithMany()
                        .HasForeignKey("ConvenioId");

                    b.HasOne("Hospital.Models.Cadastro.Medico", "Medico")
                        .WithMany("AgendamentosConsultas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Cadastro.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Atendimento.Consulta", "Tipo")
                        .WithOne("Agendamento")
                        .HasForeignKey("Hospital.Models.Agendamentos.ConsultaAgendamento", "TipoId");

                    b.Navigation("Convenio");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("Hospital.Models.Agendamentos.ExameAgendamento", b =>
                {
                    b.HasOne("Hospital.Models.Cadastro.Convenio", "Convenio")
                        .WithMany()
                        .HasForeignKey("ConvenioId");

                    b.HasOne("Hospital.Models.Cadastro.Medico", "Medico")
                        .WithMany("AgendamentosExames")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Cadastro.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Atendimento.Exame", "Tipo")
                        .WithOne("Agendamento")
                        .HasForeignKey("Hospital.Models.Agendamentos.ExameAgendamento", "TipoId");

                    b.Navigation("Convenio");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("Hospital.Models.Agendamentos.RetornoAgendamento", b =>
                {
                    b.HasOne("Hospital.Models.Cadastro.Convenio", "Convenio")
                        .WithMany()
                        .HasForeignKey("ConvenioId");

                    b.HasOne("Hospital.Models.Cadastro.Medico", "Medico")
                        .WithMany("AgendamentosRetornos")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Cadastro.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Atendimento.Retorno", "Tipo")
                        .WithOne("Agendamento")
                        .HasForeignKey("Hospital.Models.Agendamentos.RetornoAgendamento", "TipoId");

                    b.Navigation("Convenio");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("Hospital.Models.Atendimento.Consulta", b =>
                {
                    b.HasOne("Hospital.Models.Cadastro.Medico", "Medico")
                        .WithMany("Consultas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Cadastro.Paciente", "Paciente")
                        .WithMany("Consultas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Hospital.Models.Atendimento.Exame", b =>
                {
                    b.HasOne("Hospital.Models.Cadastro.Medico", "Medico")
                        .WithMany("Exames")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Cadastro.Paciente", "Paciente")
                        .WithMany("Exames")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Hospital.Models.Atendimento.Retorno", b =>
                {
                    b.HasOne("Hospital.Models.Atendimento.Consulta", "Consulta")
                        .WithMany()
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Cadastro.Medico", "Medico")
                        .WithMany("Retornos")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Cadastro.Paciente", "Paciente")
                        .WithMany("Retornos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Hospital.Models.Cadastro.Cadastro", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Hospital.Models.Cadastro.Cadastro", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Cadastro.Cadastro", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Hospital.Models.Cadastro.Cadastro", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.Cadastro.Paciente", b =>
                {
                    b.HasOne("Hospital.Models.Cadastro.Convenio", "Convenio")
                        .WithMany("Pacientes")
                        .HasForeignKey("ConvenioId");

                    b.HasOne("Hospital.Models.Cadastro.Cadastro", null)
                        .WithOne()
                        .HasForeignKey("Hospital.Models.Cadastro.Paciente", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convenio");
                });

            modelBuilder.Entity("Hospital.Models.Atendimento.Consulta", b =>
                {
                    b.Navigation("Agendamento")
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.Atendimento.Exame", b =>
                {
                    b.Navigation("Agendamento")
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.Atendimento.Retorno", b =>
                {
                    b.Navigation("Agendamento")
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.Cadastro.Convenio", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("Hospital.Models.Cadastro.Medico", b =>
                {
                    b.Navigation("AgendamentosConsultas");

                    b.Navigation("AgendamentosExames");

                    b.Navigation("AgendamentosRetornos");

                    b.Navigation("Consultas");

                    b.Navigation("Exames");

                    b.Navigation("Retornos");
                });

            modelBuilder.Entity("Hospital.Models.Cadastro.Paciente", b =>
                {
                    b.Navigation("Consultas");

                    b.Navigation("Exames");

                    b.Navigation("Retornos");
                });
#pragma warning restore 612, 618
        }
    }
}
